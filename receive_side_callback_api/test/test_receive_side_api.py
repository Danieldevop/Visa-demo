# coding: utf-8

"""
    Receive Side Callback API

    To facilitate the implementation of mVisa, Visa provides mVisa Receive Side API specifications to clients who implement a set of outbound RESTful APIs (Receive Side APIs) so that Visa can call these APIs to request clients to process the transactions over the Internet.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest
import datetime
import pytz
import random
import string
import re
import json

from src.apis.receive_side_api import ReceiveSideApi
from src.configuration import Configuration
from globalConfig import GlobalConfig


class TestReceiveSideApi(unittest.TestCase):
    """ ReceiveSideApi unit test stubs """

    @classmethod
    def setUpClass(self):
        print("---------------------------------------Tests---------------------------------------\nProduct Name: Visa Direct\nApi Name: Receive Side Callback API")
        globalConfig = GlobalConfig()
        config = Configuration()
        config.username = globalConfig.userName
        config.password = globalConfig.password
        config.cert_file = globalConfig.certificatePath
        config.key_file = globalConfig.privateKeyPath
        config.shared_secret = globalConfig.sharedSecret
        config.api_key['apikey'] = globalConfig.apiKey
        config.ssl_ca_cert = globalConfig.caCertPath
        config.proxy_url = globalConfig.proxyUrl
        self.api = ReceiveSideApi(None)

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def transformPayload(self, payload):
        payload = self.editLocalTime(payload)
        payload = self.addRandom(payload)
        payload = json.loads(payload)
        return payload

    def editLocalTime(self, payload):
        timezone = pytz.timezone("America/Los_Angeles")
        timestamp = timezone.localize(datetime.datetime.now()).strftime('%Y-%m-%dT%H:%M:%S')
        pattern = re.compile('"localTransactionDateTime":".{19}"', re.IGNORECASE)
        replacement = '"localTransactionDateTime": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)

        timestamp = timezone.localize(datetime.datetime.now()).strftime('%m%d%H%M%S')
        pattern = re.compile('"dateTimeLocal":".{10}"', re.IGNORECASE)
        replacement = '"dateTimeLocal": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)
        return payload

    def addRandom(self, payload):
        if payload == 'mle_keyId':
            return self.mleKeyId
        payload = re.sub(r'random_string', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        payload = re.sub(r'random_integer', ''.join(random.choice(string.digits) for _ in range(8)), payload)
        payload= re.sub(r'random', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        return payload

    """
    Test case for postcash_in

    .
    """
    def testpostcash_in(self):
        print("\npostcash_in")
        result = self.api.postcash_in(self.transformPayload('null'))
        pass

    """
    Test case for postcash_in_0

    .
    """
    def testpostcash_in_0(self):
        print("\npostcash_in_0")
        result = self.api.postcash_in_0(self.transformPayload('null'))
        pass

    """
    Test case for postci_advice

    .
    """
    def testpostci_advice(self):
        print("\npostci_advice")
        result = self.api.postci_advice(self.transformPayload('null'))
        pass

    """
    Test case for postco_advice

    .
    """
    def testpostco_advice(self):
        print("\npostco_advice")
        result = self.api.postco_advice(self.transformPayload('null'))
        pass

    """
    Test case for postreceive_p2_m

    .
    """
    def testpostreceive_p2_m(self):
        print("\npostreceive_p2_m")
        result = self.api.postreceive_p2_m(self.transformPayload('null'))
        pass

    """
    Test case for postreceive_p2_m_advice

    .
    """
    def testpostreceive_p2_m_advice(self):
        print("\npostreceive_p2_m_advice")
        result = self.api.postreceive_p2_m_advice(self.transformPayload('null'))
        pass


if __name__ == '__main__':
    unittest.main()


# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------