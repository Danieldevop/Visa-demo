# coding: utf-8

"""
    Receive Side Callback API

    To facilitate the implementation of mVisa, Visa provides mVisa Receive Side API specifications to clients who implement a set of outbound RESTful APIs (Receive Side APIs) so that Visa can call these APIs to request clients to process the transactions over the Internet.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReceiveP2MpostResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, merchant_city=None, merchant_category_code=None, fee_program_indicator=None, merchant_name=None, receiver_transaction_id=None, merchant_verification_value=None, merchant_terminal_id=None, merchant_country_code=None, response_code=None, merchant_id=None, auth_id_response=None):
        """
        ReceiveP2MpostResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'merchant_city': 'str',
            'merchant_category_code': 'str',
            'fee_program_indicator': 'str',
            'merchant_name': 'str',
            'receiver_transaction_id': 'str',
            'merchant_verification_value': 'str',
            'merchant_terminal_id': 'str',
            'merchant_country_code': 'str',
            'response_code': 'str',
            'merchant_id': 'str',
            'auth_id_response': 'str'
        }

        self.attribute_map = {
            'merchant_city': 'merchantCity',
            'merchant_category_code': 'merchantCategoryCode',
            'fee_program_indicator': 'feeProgramIndicator',
            'merchant_name': 'merchantName',
            'receiver_transaction_id': 'receiverTransactionId',
            'merchant_verification_value': 'merchantVerificationValue',
            'merchant_terminal_id': 'merchantTerminalID',
            'merchant_country_code': 'merchantCountryCode',
            'response_code': 'responseCode',
            'merchant_id': 'merchantID',
            'auth_id_response': 'authIdResponse'
        }

        self._merchant_city = merchant_city
        self._merchant_category_code = merchant_category_code
        self._fee_program_indicator = fee_program_indicator
        self._merchant_name = merchant_name
        self._receiver_transaction_id = receiver_transaction_id
        self._merchant_verification_value = merchant_verification_value
        self._merchant_terminal_id = merchant_terminal_id
        self._merchant_country_code = merchant_country_code
        self._response_code = response_code
        self._merchant_id = merchant_id
        self._auth_id_response = auth_id_response

    @property
    def merchant_city(self):
        """
        Gets the merchant_city of this ReceiveP2MpostResponse.
        This is called Card Acceptor Location. Recipient must replace this field with the city name of Merchant. Visa settlement reports would contain the value provided by recipient.<br>If encounter errors or the merchant PAN is invalid/does not belong to the acquirer, the acquirer should send HTTP 200 with decline response code and echo back the same field content sent in the request.

        :return: The merchant_city of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._merchant_city

    @merchant_city.setter
    def merchant_city(self, merchant_city):
        """
        Sets the merchant_city of this ReceiveP2MpostResponse.
        This is called Card Acceptor Location. Recipient must replace this field with the city name of Merchant. Visa settlement reports would contain the value provided by recipient.<br>If encounter errors or the merchant PAN is invalid/does not belong to the acquirer, the acquirer should send HTTP 200 with decline response code and echo back the same field content sent in the request.

        :param merchant_city: The merchant_city of this ReceiveP2MpostResponse.
        :type: str
        """
        if merchant_city is None:
            raise ValueError("Invalid value for `merchant_city`, must not be `None`")

        self._merchant_city = merchant_city

    @property
    def merchant_category_code(self):
        """
        Gets the merchant_category_code of this ReceiveP2MpostResponse.
        Recipient should populate the Merchant Category Code (MCC) of the merchant in the response message. If replaced by recipient Visa settlement reports would contain the value provided by recipient. This field accepts only numeric data. If there is non numeric data provided in this field the default '0000' translation will be sent to VisaNet.<br>If encounter errors or the merchant PAN is invalid/does not belong to the acquirer, the acquirer should send HTTP 200 with decline response code and echo back the same field content sent in the request.

        :return: The merchant_category_code of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """
        Sets the merchant_category_code of this ReceiveP2MpostResponse.
        Recipient should populate the Merchant Category Code (MCC) of the merchant in the response message. If replaced by recipient Visa settlement reports would contain the value provided by recipient. This field accepts only numeric data. If there is non numeric data provided in this field the default '0000' translation will be sent to VisaNet.<br>If encounter errors or the merchant PAN is invalid/does not belong to the acquirer, the acquirer should send HTTP 200 with decline response code and echo back the same field content sent in the request.

        :param merchant_category_code: The merchant_category_code of this ReceiveP2MpostResponse.
        :type: str
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def fee_program_indicator(self):
        """
        Gets the fee_program_indicator of this ReceiveP2MpostResponse.
        Optional field which may be populated by recipient where applicable. This field is to be sent as NULL if it is not populated.

        :return: The fee_program_indicator of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._fee_program_indicator

    @fee_program_indicator.setter
    def fee_program_indicator(self, fee_program_indicator):
        """
        Sets the fee_program_indicator of this ReceiveP2MpostResponse.
        Optional field which may be populated by recipient where applicable. This field is to be sent as NULL if it is not populated.

        :param fee_program_indicator: The fee_program_indicator of this ReceiveP2MpostResponse.
        :type: str
        """

        self._fee_program_indicator = fee_program_indicator

    @property
    def merchant_name(self):
        """
        Gets the merchant_name of this ReceiveP2MpostResponse.
        This is called Card Acceptor Name in the VisaNet Specifications. Recipient must replace this field with the ‘doing business as’ name of Merchant. Visa settlement reports would contain the value provided by recipient.<br>If encounter errors or the merchant PAN is invalid/does not belong to the acquirer, the acquirer should send HTTP 200 with decline response code and echo back the same field content sent in the request.

        :return: The merchant_name of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """
        Sets the merchant_name of this ReceiveP2MpostResponse.
        This is called Card Acceptor Name in the VisaNet Specifications. Recipient must replace this field with the ‘doing business as’ name of Merchant. Visa settlement reports would contain the value provided by recipient.<br>If encounter errors or the merchant PAN is invalid/does not belong to the acquirer, the acquirer should send HTTP 200 with decline response code and echo back the same field content sent in the request.

        :param merchant_name: The merchant_name of this ReceiveP2MpostResponse.
        :type: str
        """
        if merchant_name is None:
            raise ValueError("Invalid value for `merchant_name`, must not be `None`")

        self._merchant_name = merchant_name

    @property
    def receiver_transaction_id(self):
        """
        Gets the receiver_transaction_id of this ReceiveP2MpostResponse.
        Acquirer may provide a transaction ID that can be used for investigation if required. This field is to be sent as NULL if it is not populated

        :return: The receiver_transaction_id of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._receiver_transaction_id

    @receiver_transaction_id.setter
    def receiver_transaction_id(self, receiver_transaction_id):
        """
        Sets the receiver_transaction_id of this ReceiveP2MpostResponse.
        Acquirer may provide a transaction ID that can be used for investigation if required. This field is to be sent as NULL if it is not populated

        :param receiver_transaction_id: The receiver_transaction_id of this ReceiveP2MpostResponse.
        :type: str
        """

        self._receiver_transaction_id = receiver_transaction_id

    @property
    def merchant_verification_value(self):
        """
        Gets the merchant_verification_value of this ReceiveP2MpostResponse.
        Recipient are expected to populate the Merchant Verification Value used to identify merchants that participate in a variety of programs in this field. This field is to be sent as NULL if it is not populated.

        :return: The merchant_verification_value of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._merchant_verification_value

    @merchant_verification_value.setter
    def merchant_verification_value(self, merchant_verification_value):
        """
        Sets the merchant_verification_value of this ReceiveP2MpostResponse.
        Recipient are expected to populate the Merchant Verification Value used to identify merchants that participate in a variety of programs in this field. This field is to be sent as NULL if it is not populated.

        :param merchant_verification_value: The merchant_verification_value of this ReceiveP2MpostResponse.
        :type: str
        """

        self._merchant_verification_value = merchant_verification_value

    @property
    def merchant_terminal_id(self):
        """
        Gets the merchant_terminal_id of this ReceiveP2MpostResponse.
        <b>Conditional</b>. Recipient may replace this field with card acceptor terminal ID as defined in recipient system. If replaced by recipient, all occurrences of card acceptor terminal ID in reports, files, transaction inquiries, etc. will contain the value provided by the recipient. This field is to be sent as NULL if it is not populated.

        :return: The merchant_terminal_id of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._merchant_terminal_id

    @merchant_terminal_id.setter
    def merchant_terminal_id(self, merchant_terminal_id):
        """
        Sets the merchant_terminal_id of this ReceiveP2MpostResponse.
        <b>Conditional</b>. Recipient may replace this field with card acceptor terminal ID as defined in recipient system. If replaced by recipient, all occurrences of card acceptor terminal ID in reports, files, transaction inquiries, etc. will contain the value provided by the recipient. This field is to be sent as NULL if it is not populated.

        :param merchant_terminal_id: The merchant_terminal_id of this ReceiveP2MpostResponse.
        :type: str
        """

        self._merchant_terminal_id = merchant_terminal_id

    @property
    def merchant_country_code(self):
        """
        Gets the merchant_country_code of this ReceiveP2MpostResponse.
        <b>Conditional</b>. Recipient may replace this field with the 2-letter ISO 3166 country code of the merchant, if the country code of recipient is different than originator. Visa settlement reports would contain the value provided by recipient. This field is to be sent as NULL if it is not populated.

        :return: The merchant_country_code of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._merchant_country_code

    @merchant_country_code.setter
    def merchant_country_code(self, merchant_country_code):
        """
        Sets the merchant_country_code of this ReceiveP2MpostResponse.
        <b>Conditional</b>. Recipient may replace this field with the 2-letter ISO 3166 country code of the merchant, if the country code of recipient is different than originator. Visa settlement reports would contain the value provided by recipient. This field is to be sent as NULL if it is not populated.

        :param merchant_country_code: The merchant_country_code of this ReceiveP2MpostResponse.
        :type: str
        """

        self._merchant_country_code = merchant_country_code

    @property
    def response_code(self):
        """
        Gets the response_code of this ReceiveP2MpostResponse.
        Contains a code (also known as 'Action Code') that defines the response to a request. Refer to actionCode

        :return: The response_code of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """
        Sets the response_code of this ReceiveP2MpostResponse.
        Contains a code (also known as 'Action Code') that defines the response to a request. Refer to actionCode

        :param response_code: The response_code of this ReceiveP2MpostResponse.
        :type: str
        """
        if response_code is None:
            raise ValueError("Invalid value for `response_code`, must not be `None`")

        self._response_code = response_code

    @property
    def merchant_id(self):
        """
        Gets the merchant_id of this ReceiveP2MpostResponse.
        <b>Conditional</b>. Recipient may replace this field with card acceptor ID code of the merchant as defined in recipient system. If replaced by recipient, all occurrences of card acceptor ID code in reports, files, transaction inquiries, etc. will contain the value provided by the recipient. This field is to be sent as NULL if it is not populated.

        :return: The merchant_id of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """
        Sets the merchant_id of this ReceiveP2MpostResponse.
        <b>Conditional</b>. Recipient may replace this field with card acceptor ID code of the merchant as defined in recipient system. If replaced by recipient, all occurrences of card acceptor ID code in reports, files, transaction inquiries, etc. will contain the value provided by the recipient. This field is to be sent as NULL if it is not populated.

        :param merchant_id: The merchant_id of this ReceiveP2MpostResponse.
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def auth_id_response(self):
        """
        Gets the auth_id_response of this ReceiveP2MpostResponse.
        Contains the authorization code provided by the recipient when a transaction is approved. Visa recommends that recipient maintains uniqueness of this code for a given merchant PAN, however Visa would not maintain any checks for uniqueness. This field is to be sent as NULL if it is not populated.

        :return: The auth_id_response of this ReceiveP2MpostResponse.
        :rtype: str
        """
        return self._auth_id_response

    @auth_id_response.setter
    def auth_id_response(self, auth_id_response):
        """
        Sets the auth_id_response of this ReceiveP2MpostResponse.
        Contains the authorization code provided by the recipient when a transaction is approved. Visa recommends that recipient maintains uniqueness of this code for a given merchant PAN, however Visa would not maintain any checks for uniqueness. This field is to be sent as NULL if it is not populated.

        :param auth_id_response: The auth_id_response of this ReceiveP2MpostResponse.
        :type: str
        """

        self._auth_id_response = auth_id_response

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReceiveP2MpostResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------